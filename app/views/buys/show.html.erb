<h1>Buy page</h1>

<p>Welcome, <%= @user.name %>!</p>

<h2>Item</h2>

<p><%= @catalog_item.name %></p>
<p><%= @catalog_item.description %></p>

<h3>Card Payment</h3>
<form id="payment-form">
  <div id="card-container"></div>
  <button id="card-button" type="button">Pay <%= number_to_currency(@catalog_item.amount_cents / 100.0) %> with a credit card</button>
</form>
<div id="payment-status-container"></div>

<h3>Apple Pay</h3>
<form>
  <div id="apple-pay-button"></div>
</form>

<h3>Bank Account</h3>
<form>
  <button id="ach-button" type="button">Pay with Bank Account</button>
</form>

<h3>Gift Card</h3>
<form>
  <div id="gift-card-container"></div>
  <button id="gift-card-button" type="button">Pay with Gift Card</button>
</form>

<h3>Afterpay</h3>
<form>
  <div id="afterpay-container"></div>
  <button id="afterpay-button" type="button">Afterpay</button>
</form>

<h3>Google Pay</h3>
<form>
  <div id="apple-pay-button"></div>
</form>

<% content_for :javascript do %>
     <script>
    const appId = '<%= Rails.application.credentials.payment_sdk.application_id %>';
    const locationId = '<%= Rails.application.credentials.payment_sdk.location_id %>'; 
    const displayAmount = '<%= number_with_precision(@catalog_item.amount_cents/100.0, precision: 2) %>';

    async function initializeCard(payments) {
   const card = await payments.card();
   await card.attach('#card-container'); 
   return card; 
 }

 async function tokenize(paymentMethod, args) {
   console.log('Running tokenize');
   const tokenResult = await paymentMethod.tokenize(args);
   if (tokenResult.status === 'OK') {
     return tokenResult.token;
   } else {
     let errorMessage = `Tokenization failed-status: ${tokenResult.status}`;
     if (tokenResult.errors) {
       errorMessage += ` and errors: ${JSON.stringify(
         tokenResult.errors
       )}`;
     }
     throw new Error(errorMessage);
   }
 }

 async function makePayment(token) {
   console.log('Running payment API call');
   const body = JSON.stringify({
     locationId,
     sourceId: token,
     itemId: <%= @catalog_item.id %>
   });
   const paymentResponse = await fetch('/api/payments', {
     method: 'POST',
     headers: {
       'Content-Type': 'application/json',
       'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
     },
     body,
   });
   if (paymentResponse.ok) {
     return paymentResponse.json();
   }
   const errorBody = await paymentResponse.text();
   throw new Error(errorBody);
 }

  async function eventHandler(event, paymentMethod, paymentMethodDesc, paymentMethodParams) {
    event.preventDefault();
    console.log(`Clicking on the ${paymentMethodDesc}`);
    const token = await tokenize(paymentMethod, paymentMethodParams);
    const payment = await makePayment(token);
    console.log('Payment result');
    console.log(payment);
  }

async function mainRunner() {
  if (!window.Square) {
    throw new Error('Square.js failed to load properly');
  }
  const payments = window.Square.payments(appId, locationId);
  let card;
  try {
    card = await initializeCard(payments);
  } catch (e) {
    console.error('Initializing Card failed', e);
    return;
  }

  const cardButton = document.querySelector('#card-button');
  cardButton.addEventListener('click', async function (event) {
    cardButton.disabled = true;
    eventHandler(event, card, 'card form');
    cardButton.disabled = false;
  });

  const applePayButton = document.querySelector('#apple-pay-button');

  const applePayRequest = payments.paymentRequest({
    countryCode: 'US',
    currencyCode: 'USD',
    total: {
      amount: displayAmount,
      label: 'Total',
    },
  });
  const applePay = await payments.applePay(applePayRequest);

  applePayButton.addEventListener('click', async function (event) {
    return eventHandler(event, applePay, 'apple pay button');
  });

  const ach = await payments.ach();
  const achButton = document.querySelector('#ach-button');
  achButton.addEventListener('click', async function (event) {
    return eventHandler(event, ach, 'ACH button', { accountHolderName: 'John Doe' });
  });

  const giftCard = await payments.giftCard();
  await giftCard.attach('#gift-card-container');
  const giftCardButton = document.querySelector('#gift-card-button');
  giftCardButton.addEventListener('click', async function (event) {
    return eventHandler(event, giftCard, 'gift card button');
  });

  const afterpayRequest = payments.paymentRequest({
    countryCode: 'US',
    currencyCode: 'USD',
    total: {
      amount: displayAmount,
      label: 'Total',
    },
    requestShippingContact: true,
  });
    afterpayRequest.addEventListener('afterpay_shippingaddresschanged', function (contact) {
      return {
        shippingOptions: [
          {
            taxLineItems: [],
            total: {
              amount: displayAmount,
              label: 'Total'
            }
          }
        ],
      }
    });
  const afterpay = await payments.afterpayClearpay(afterpayRequest);
  await afterpay.attach("#afterpay-container");
  const afterpayButton = document.querySelector('#afterpay-button');
  afterpayButton.addEventListener('click', async function (event) {
    return eventHandler(event, afterpay, 'afterpay button');
  });

  const googlePayRequest = payments.paymentRequest({
    countryCode: 'US',
    currencyCode: 'USD',
    total: {
      amount: displayAmount,
      label: 'Total',
    },
  }    
  });
  const googlePay = await payments.googlePay(googlePayRequest);
  const googlePayButton = document.querySelector('#google-pay-button');
  googlePayButton.addEventListener('click', async function (event) {
    return eventHandler(event, googlePay, 'Google Pay button');
  });
}

mainRunner();
    </script>
<% end %>

<% content_for :css do %>
<style>
   #apple-pay-button {
     height: 48px;
     width: 100%;
     display: inline-block;
     -webkit-appearance: -apple-pay-button;
     -apple-pay-button-type: plain;
     -apple-pay-button-style: black;
   }
 </style>

<% end %>